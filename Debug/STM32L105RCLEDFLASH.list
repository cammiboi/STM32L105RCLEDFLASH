
STM32L105RCLEDFLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000106c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080011a8  080011a8  000111a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080011c4  080011c4  000111c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080011c8  080011c8  000111c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080011cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  080011d0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000024  080011d0  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000091e4  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000015db  00000000  00000000  00029211  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001400  00000000  00000000  0002a7ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000318  00000000  00000000  0002bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005f0  00000000  00000000  0002bf08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002598  00000000  00000000  0002c4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001608  00000000  00000000  0002ea90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000644  00000000  00000000  00030114  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	08001190 	.word	0x08001190

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	08001190 	.word	0x08001190

0800017c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <HAL_InitTick+0x24>)
{
 800017e:	b510      	push	{r4, lr}
 8000180:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000188:	fbb0 f0f3 	udiv	r0, r0, r3
 800018c:	f000 f878 	bl	8000280 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000190:	2200      	movs	r2, #0
 8000192:	4621      	mov	r1, r4
 8000194:	f04f 30ff 	mov.w	r0, #4294967295
 8000198:	f000 f83e 	bl	8000218 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800019c:	2000      	movs	r0, #0
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000

080001a4 <HAL_Init>:
{
 80001a4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a6:	2003      	movs	r0, #3
 80001a8:	f000 f824 	bl	80001f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f7ff ffe5 	bl	800017c <HAL_InitTick>
  HAL_MspInit();
 80001b2:	f000 ff27 	bl	8001004 <HAL_MspInit>
}
 80001b6:	2000      	movs	r0, #0
 80001b8:	bd08      	pop	{r3, pc}
	...

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001bc:	4a02      	ldr	r2, [pc, #8]	; (80001c8 <HAL_IncTick+0xc>)
 80001be:	6813      	ldr	r3, [r2, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000020 	.word	0x20000020

080001cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001cc:	4b01      	ldr	r3, [pc, #4]	; (80001d4 <HAL_GetTick+0x8>)
 80001ce:	6818      	ldr	r0, [r3, #0]
}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000020 	.word	0x20000020

080001d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001d8:	b513      	push	{r0, r1, r4, lr}
 80001da:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80001dc:	f7ff fff6 	bl	80001cc <HAL_GetTick>
 80001e0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80001e2:	f7ff fff3 	bl	80001cc <HAL_GetTick>
 80001e6:	9b01      	ldr	r3, [sp, #4]
 80001e8:	1b00      	subs	r0, r0, r4
 80001ea:	4298      	cmp	r0, r3
 80001ec:	d3f9      	bcc.n	80001e2 <HAL_Delay+0xa>
  {
  }
}
 80001ee:	b002      	add	sp, #8
 80001f0:	bd10      	pop	{r4, pc}
	...

080001f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001f6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000202:	041b      	lsls	r3, r3, #16
 8000204:	0c1b      	lsrs	r3, r3, #16
 8000206:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800020a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800020e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000210:	60d3      	str	r3, [r2, #12]
 8000212:	4770      	bx	lr
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000218:	4b17      	ldr	r3, [pc, #92]	; (8000278 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800021a:	b530      	push	{r4, r5, lr}
 800021c:	68dc      	ldr	r4, [r3, #12]
 800021e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000222:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000228:	2b04      	cmp	r3, #4
 800022a:	bf28      	it	cs
 800022c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800022e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000230:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000234:	bf98      	it	ls
 8000236:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000238:	fa05 f303 	lsl.w	r3, r5, r3
 800023c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf88      	it	hi
 8000242:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	4019      	ands	r1, r3
 8000246:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000248:	fa05 f404 	lsl.w	r4, r5, r4
 800024c:	3c01      	subs	r4, #1
 800024e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000250:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000252:	ea42 0201 	orr.w	r2, r2, r1
 8000256:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	bfaf      	iteee	ge
 800025c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	4b06      	ldrlt	r3, [pc, #24]	; (800027c <HAL_NVIC_SetPriority+0x64>)
 8000262:	f000 000f 	andlt.w	r0, r0, #15
 8000266:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	bfa5      	ittet	ge
 800026a:	b2d2      	uxtbge	r2, r2
 800026c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000272:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000276:	bd30      	pop	{r4, r5, pc}
 8000278:	e000ed00 	.word	0xe000ed00
 800027c:	e000ed14 	.word	0xe000ed14

08000280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	3801      	subs	r0, #1
 8000282:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000286:	d20a      	bcs.n	800029e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ae:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	bf0c      	ite	eq
 80002b4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002b8:	f022 0204 	bicne.w	r2, r2, #4
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	4770      	bx	lr
 80002c0:	e000e010 	.word	0xe000e010

080002c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002c4:	4770      	bx	lr

080002c6 <HAL_SYSTICK_IRQHandler>:
{
 80002c6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002c8:	f7ff fffc 	bl	80002c4 <HAL_SYSTICK_Callback>
 80002cc:	bd08      	pop	{r3, pc}
	...

080002d0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80002d0:	2300      	movs	r3, #0
{ 
 80002d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80002d6:	4a62      	ldr	r2, [pc, #392]	; (8000460 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80002d8:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002dc:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8000468 <HAL_GPIO_Init+0x198>
{ 
 80002e0:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80002e2:	fa38 f403 	lsrs.w	r4, r8, r3
 80002e6:	d102      	bne.n	80002ee <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 80002e8:	b005      	add	sp, #20
 80002ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80002ee:	2401      	movs	r4, #1
 80002f0:	409c      	lsls	r4, r3
    if(iocurrent)
 80002f2:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80002f6:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 80002f8:	f000 80a7 	beq.w	800044a <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80002fc:	684c      	ldr	r4, [r1, #4]
 80002fe:	f024 0a10 	bic.w	sl, r4, #16
 8000302:	f1ba 0f02 	cmp.w	sl, #2
 8000306:	d116      	bne.n	8000336 <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000308:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 800030c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000310:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000314:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000318:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800031c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000320:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000324:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000328:	690d      	ldr	r5, [r1, #16]
 800032a:	fa05 f50b 	lsl.w	r5, r5, fp
 800032e:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 8000332:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000336:	2503      	movs	r5, #3
 8000338:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800033c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000340:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8000342:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000346:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800034a:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800034e:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000352:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000356:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800035a:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 800035e:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000362:	d816      	bhi.n	8000392 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 8000364:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000368:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800036a:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800036e:	fa07 fa0c 	lsl.w	sl, r7, ip
 8000372:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000376:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800037a:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800037e:	9f01      	ldr	r7, [sp, #4]
 8000380:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000384:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000388:	fa0e fe03 	lsl.w	lr, lr, r3
 800038c:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000390:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000392:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000394:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000396:	688f      	ldr	r7, [r1, #8]
 8000398:	fa07 f70c 	lsl.w	r7, r7, ip
 800039c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800039e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003a0:	00e5      	lsls	r5, r4, #3
 80003a2:	d552      	bpl.n	800044a <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003a4:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80003ac:	f023 0703 	bic.w	r7, r3, #3
 80003b0:	f045 0501 	orr.w	r5, r5, #1
 80003b4:	f8c9 5020 	str.w	r5, [r9, #32]
 80003b8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80003bc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80003c0:	f005 0501 	and.w	r5, r5, #1
 80003c4:	9503      	str	r5, [sp, #12]
 80003c6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003ca:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ce:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003d0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80003d4:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003d6:	fa0e fe0c 	lsl.w	lr, lr, ip
 80003da:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003de:	4d21      	ldr	r5, [pc, #132]	; (8000464 <HAL_GPIO_Init+0x194>)
 80003e0:	42a8      	cmp	r0, r5
 80003e2:	d034      	beq.n	800044e <HAL_GPIO_Init+0x17e>
 80003e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	d032      	beq.n	8000452 <HAL_GPIO_Init+0x182>
 80003ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003f0:	42a8      	cmp	r0, r5
 80003f2:	d030      	beq.n	8000456 <HAL_GPIO_Init+0x186>
 80003f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	d02e      	beq.n	800045a <HAL_GPIO_Init+0x18a>
 80003fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000400:	42a8      	cmp	r0, r5
 8000402:	bf14      	ite	ne
 8000404:	2505      	movne	r5, #5
 8000406:	2504      	moveq	r5, #4
 8000408:	fa05 f50c 	lsl.w	r5, r5, ip
 800040c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000410:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000412:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000414:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000416:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800041a:	bf0c      	ite	eq
 800041c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800041e:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000420:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000422:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000424:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000428:	bf0c      	ite	eq
 800042a:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800042c:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 800042e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000430:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000432:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000436:	bf0c      	ite	eq
 8000438:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800043a:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800043c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800043e:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000440:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000442:	bf54      	ite	pl
 8000444:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8000446:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000448:	60d5      	str	r5, [r2, #12]
    position++;
 800044a:	3301      	adds	r3, #1
 800044c:	e749      	b.n	80002e2 <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800044e:	2500      	movs	r5, #0
 8000450:	e7da      	b.n	8000408 <HAL_GPIO_Init+0x138>
 8000452:	2501      	movs	r5, #1
 8000454:	e7d8      	b.n	8000408 <HAL_GPIO_Init+0x138>
 8000456:	2502      	movs	r5, #2
 8000458:	e7d6      	b.n	8000408 <HAL_GPIO_Init+0x138>
 800045a:	2503      	movs	r5, #3
 800045c:	e7d4      	b.n	8000408 <HAL_GPIO_Init+0x138>
 800045e:	bf00      	nop
 8000460:	40010400 	.word	0x40010400
 8000464:	40020000 	.word	0x40020000
 8000468:	40023800 	.word	0x40023800

0800046c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800046c:	b10a      	cbz	r2, 8000472 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800046e:	6181      	str	r1, [r0, #24]
 8000470:	4770      	bx	lr
 8000472:	0409      	lsls	r1, r1, #16
 8000474:	e7fb      	b.n	800046e <HAL_GPIO_WritePin+0x2>

08000476 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000476:	6943      	ldr	r3, [r0, #20]
 8000478:	4059      	eors	r1, r3
 800047a:	6141      	str	r1, [r0, #20]
 800047c:	4770      	bx	lr
	...

08000480 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000480:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8000482:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000484:	689a      	ldr	r2, [r3, #8]
 8000486:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800048a:	d00c      	beq.n	80004a6 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 800048c:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800048e:	491a      	ldr	r1, [pc, #104]	; (80004f8 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000490:	680b      	ldr	r3, [r1, #0]
 8000492:	f023 0301 	bic.w	r3, r3, #1
 8000496:	4313      	orrs	r3, r2
 8000498:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800049a:	6808      	ldr	r0, [r1, #0]
 800049c:	f000 0001 	and.w	r0, r0, #1
 80004a0:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80004a2:	b002      	add	sp, #8
 80004a4:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80004a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004a8:	4914      	ldr	r1, [pc, #80]	; (80004fc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80004aa:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80004ae:	d00f      	beq.n	80004d0 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004b0:	680a      	ldr	r2, [r1, #0]
 80004b2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80004b6:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80004ba:	d1e7      	bne.n	800048c <RCC_SetFlashLatencyFromMSIRange+0xc>
 80004bc:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80004c0:	d1e4      	bne.n	800048c <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 80004c2:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80004c4:	6813      	ldr	r3, [r2, #0]
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80004cc:	2201      	movs	r2, #1
 80004ce:	e7de      	b.n	800048e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80004d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004d6:	625a      	str	r2, [r3, #36]	; 0x24
 80004d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004da:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80004de:	9201      	str	r2, [sp, #4]
 80004e0:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004e2:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80004e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004e6:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80004ea:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80004ee:	6259      	str	r1, [r3, #36]	; 0x24
 80004f0:	e7e1      	b.n	80004b6 <RCC_SetFlashLatencyFromMSIRange+0x36>
 80004f2:	bf00      	nop
 80004f4:	40023800 	.word	0x40023800
 80004f8:	40023c00 	.word	0x40023c00
 80004fc:	40007000 	.word	0x40007000

08000500 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000500:	6803      	ldr	r3, [r0, #0]
{
 8000502:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000506:	07d9      	lsls	r1, r3, #31
{
 8000508:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800050a:	d46a      	bmi.n	80005e2 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800050c:	6823      	ldr	r3, [r4, #0]
 800050e:	079a      	lsls	r2, r3, #30
 8000510:	f100 80e6 	bmi.w	80006e0 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000514:	6823      	ldr	r3, [r4, #0]
 8000516:	06de      	lsls	r6, r3, #27
 8000518:	d555      	bpl.n	80005c6 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800051a:	4dc1      	ldr	r5, [pc, #772]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 800051c:	68ab      	ldr	r3, [r5, #8]
 800051e:	f013 0f0c 	tst.w	r3, #12
 8000522:	f040 8183 	bne.w	800082c <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800052a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800052e:	6829      	ldr	r1, [r5, #0]
 8000530:	fa93 f3a3 	rbit	r3, r3
 8000534:	fab3 f383 	clz	r3, r3
 8000538:	2201      	movs	r2, #1
 800053a:	f003 031f 	and.w	r3, r3, #31
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	420b      	tst	r3, r1
 8000544:	d002      	beq.n	800054c <HAL_RCC_OscConfig+0x4c>
 8000546:	69a3      	ldr	r3, [r4, #24]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d06e      	beq.n	800062a <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800054c:	4db4      	ldr	r5, [pc, #720]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 800054e:	6a20      	ldr	r0, [r4, #32]
 8000550:	686b      	ldr	r3, [r5, #4]
 8000552:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000556:	4298      	cmp	r0, r3
 8000558:	f240 814a 	bls.w	80007f0 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800055c:	f7ff ff90 	bl	8000480 <RCC_SetFlashLatencyFromMSIRange>
 8000560:	2800      	cmp	r0, #0
 8000562:	d162      	bne.n	800062a <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000564:	686b      	ldr	r3, [r5, #4]
 8000566:	6a22      	ldr	r2, [r4, #32]
 8000568:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800056c:	4313      	orrs	r3, r2
 800056e:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000570:	6869      	ldr	r1, [r5, #4]
 8000572:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000576:	fa93 f3a3 	rbit	r3, r3
 800057a:	fab3 f283 	clz	r2, r3
 800057e:	69e3      	ldr	r3, [r4, #28]
 8000580:	4093      	lsls	r3, r2
 8000582:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000586:	4313      	orrs	r3, r2
 8000588:	606b      	str	r3, [r5, #4]
 800058a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800058e:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000592:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000596:	4ba2      	ldr	r3, [pc, #648]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 8000598:	21f0      	movs	r1, #240	; 0xf0
 800059a:	689a      	ldr	r2, [r3, #8]
 800059c:	fa91 f1a1 	rbit	r1, r1
 80005a0:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80005a4:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80005a6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80005aa:	40c3      	lsrs	r3, r0
 80005ac:	1c58      	adds	r0, r3, #1
 80005ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80005b2:	40ca      	lsrs	r2, r1
 80005b4:	499b      	ldr	r1, [pc, #620]	; (8000824 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80005b6:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80005b8:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80005ba:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80005bc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80005be:	4a9a      	ldr	r2, [pc, #616]	; (8000828 <HAL_RCC_OscConfig+0x328>)
 80005c0:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80005c2:	f7ff fddb 	bl	800017c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005c6:	6823      	ldr	r3, [r4, #0]
 80005c8:	071d      	lsls	r5, r3, #28
 80005ca:	f100 8191 	bmi.w	80008f0 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005ce:	6823      	ldr	r3, [r4, #0]
 80005d0:	0758      	lsls	r0, r3, #29
 80005d2:	f100 81d3 	bmi.w	800097c <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80005d8:	2a00      	cmp	r2, #0
 80005da:	f040 8257 	bne.w	8000a8c <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 80005de:	2000      	movs	r0, #0
 80005e0:	e024      	b.n	800062c <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005e2:	4b8f      	ldr	r3, [pc, #572]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 80005e4:	689a      	ldr	r2, [r3, #8]
 80005e6:	f002 020c 	and.w	r2, r2, #12
 80005ea:	2a08      	cmp	r2, #8
 80005ec:	d007      	beq.n	80005fe <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	f002 020c 	and.w	r2, r2, #12
 80005f4:	2a0c      	cmp	r2, #12
 80005f6:	d11c      	bne.n	8000632 <HAL_RCC_OscConfig+0x132>
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	03db      	lsls	r3, r3, #15
 80005fc:	d519      	bpl.n	8000632 <HAL_RCC_OscConfig+0x132>
 80005fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000602:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000606:	4a86      	ldr	r2, [pc, #536]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 8000608:	6811      	ldr	r1, [r2, #0]
 800060a:	fa93 f3a3 	rbit	r3, r3
 800060e:	fab3 f383 	clz	r3, r3
 8000612:	2201      	movs	r2, #1
 8000614:	f003 031f 	and.w	r3, r3, #31
 8000618:	fa02 f303 	lsl.w	r3, r2, r3
 800061c:	420b      	tst	r3, r1
 800061e:	f43f af75 	beq.w	800050c <HAL_RCC_OscConfig+0xc>
 8000622:	6863      	ldr	r3, [r4, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	f47f af71 	bne.w	800050c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800062a:	2001      	movs	r0, #1
}
 800062c:	b003      	add	sp, #12
 800062e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000632:	6863      	ldr	r3, [r4, #4]
 8000634:	4d7a      	ldr	r5, [pc, #488]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 8000636:	2b01      	cmp	r3, #1
 8000638:	d120      	bne.n	800067c <HAL_RCC_OscConfig+0x17c>
 800063a:	682b      	ldr	r3, [r5, #0]
 800063c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000640:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000642:	f7ff fdc3 	bl	80001cc <HAL_GetTick>
 8000646:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800064a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800064c:	2601      	movs	r6, #1
 800064e:	4f74      	ldr	r7, [pc, #464]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 8000650:	fa95 f3a5 	rbit	r3, r5
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	fa95 f3a5 	rbit	r3, r5
 800065a:	fab3 f383 	clz	r3, r3
 800065e:	f003 031f 	and.w	r3, r3, #31
 8000662:	fa06 f303 	lsl.w	r3, r6, r3
 8000666:	4213      	tst	r3, r2
 8000668:	f47f af50 	bne.w	800050c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800066c:	f7ff fdae 	bl	80001cc <HAL_GetTick>
 8000670:	eba0 0008 	sub.w	r0, r0, r8
 8000674:	2864      	cmp	r0, #100	; 0x64
 8000676:	d9eb      	bls.n	8000650 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000678:	2003      	movs	r0, #3
 800067a:	e7d7      	b.n	800062c <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800067c:	bb13      	cbnz	r3, 80006c4 <HAL_RCC_OscConfig+0x1c4>
 800067e:	682b      	ldr	r3, [r5, #0]
 8000680:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000688:	602b      	str	r3, [r5, #0]
 800068a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800068c:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000694:	f7ff fd9a 	bl	80001cc <HAL_GetTick>
 8000698:	4680      	mov	r8, r0
 800069a:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800069e:	682a      	ldr	r2, [r5, #0]
 80006a0:	fa96 f3a6 	rbit	r3, r6
 80006a4:	fab3 f383 	clz	r3, r3
 80006a8:	f003 031f 	and.w	r3, r3, #31
 80006ac:	fa07 f303 	lsl.w	r3, r7, r3
 80006b0:	4213      	tst	r3, r2
 80006b2:	f43f af2b 	beq.w	800050c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006b6:	f7ff fd89 	bl	80001cc <HAL_GetTick>
 80006ba:	eba0 0008 	sub.w	r0, r0, r8
 80006be:	2864      	cmp	r0, #100	; 0x64
 80006c0:	d9eb      	bls.n	800069a <HAL_RCC_OscConfig+0x19a>
 80006c2:	e7d9      	b.n	8000678 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006c4:	2b05      	cmp	r3, #5
 80006c6:	682b      	ldr	r3, [r5, #0]
 80006c8:	d103      	bne.n	80006d2 <HAL_RCC_OscConfig+0x1d2>
 80006ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006ce:	602b      	str	r3, [r5, #0]
 80006d0:	e7b3      	b.n	800063a <HAL_RCC_OscConfig+0x13a>
 80006d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006d6:	602b      	str	r3, [r5, #0]
 80006d8:	682b      	ldr	r3, [r5, #0]
 80006da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006de:	e7af      	b.n	8000640 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006e0:	4b4f      	ldr	r3, [pc, #316]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 80006e2:	689a      	ldr	r2, [r3, #8]
 80006e4:	f002 020c 	and.w	r2, r2, #12
 80006e8:	2a04      	cmp	r2, #4
 80006ea:	d007      	beq.n	80006fc <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006ec:	689a      	ldr	r2, [r3, #8]
 80006ee:	f002 020c 	and.w	r2, r2, #12
 80006f2:	2a0c      	cmp	r2, #12
 80006f4:	d124      	bne.n	8000740 <HAL_RCC_OscConfig+0x240>
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	03df      	lsls	r7, r3, #15
 80006fa:	d421      	bmi.n	8000740 <HAL_RCC_OscConfig+0x240>
 80006fc:	2302      	movs	r3, #2
 80006fe:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000702:	4a47      	ldr	r2, [pc, #284]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 8000704:	6810      	ldr	r0, [r2, #0]
 8000706:	fa93 f3a3 	rbit	r3, r3
 800070a:	fab3 f383 	clz	r3, r3
 800070e:	2101      	movs	r1, #1
 8000710:	f003 031f 	and.w	r3, r3, #31
 8000714:	fa01 f303 	lsl.w	r3, r1, r3
 8000718:	4203      	tst	r3, r0
 800071a:	4613      	mov	r3, r2
 800071c:	d002      	beq.n	8000724 <HAL_RCC_OscConfig+0x224>
 800071e:	68e2      	ldr	r2, [r4, #12]
 8000720:	428a      	cmp	r2, r1
 8000722:	d182      	bne.n	800062a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000724:	6858      	ldr	r0, [r3, #4]
 8000726:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800072a:	fa92 f2a2 	rbit	r2, r2
 800072e:	fab2 f182 	clz	r1, r2
 8000732:	6922      	ldr	r2, [r4, #16]
 8000734:	408a      	lsls	r2, r1
 8000736:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 800073a:	430a      	orrs	r2, r1
 800073c:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800073e:	e6e9      	b.n	8000514 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000740:	68e2      	ldr	r2, [r4, #12]
 8000742:	2501      	movs	r5, #1
 8000744:	b382      	cbz	r2, 80007a8 <HAL_RCC_OscConfig+0x2a8>
 8000746:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800074a:	fab3 f383 	clz	r3, r3
 800074e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000752:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800075a:	f7ff fd37 	bl	80001cc <HAL_GetTick>
 800075e:	2702      	movs	r7, #2
 8000760:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000762:	4e2f      	ldr	r6, [pc, #188]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 8000764:	fa97 f3a7 	rbit	r3, r7
 8000768:	6832      	ldr	r2, [r6, #0]
 800076a:	fa97 f3a7 	rbit	r3, r7
 800076e:	fab3 f383 	clz	r3, r3
 8000772:	f003 031f 	and.w	r3, r3, #31
 8000776:	fa05 f303 	lsl.w	r3, r5, r3
 800077a:	4213      	tst	r3, r2
 800077c:	d00d      	beq.n	800079a <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800077e:	6871      	ldr	r1, [r6, #4]
 8000780:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000784:	fa93 f3a3 	rbit	r3, r3
 8000788:	fab3 f283 	clz	r2, r3
 800078c:	6923      	ldr	r3, [r4, #16]
 800078e:	4093      	lsls	r3, r2
 8000790:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8000794:	4313      	orrs	r3, r2
 8000796:	6073      	str	r3, [r6, #4]
 8000798:	e6bc      	b.n	8000514 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800079a:	f7ff fd17 	bl	80001cc <HAL_GetTick>
 800079e:	eba0 0008 	sub.w	r0, r0, r8
 80007a2:	2802      	cmp	r0, #2
 80007a4:	d9de      	bls.n	8000764 <HAL_RCC_OscConfig+0x264>
 80007a6:	e767      	b.n	8000678 <HAL_RCC_OscConfig+0x178>
 80007a8:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80007ac:	fab3 f383 	clz	r3, r3
 80007b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007b4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007bc:	f7ff fd06 	bl	80001cc <HAL_GetTick>
 80007c0:	2602      	movs	r6, #2
 80007c2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007c4:	4f16      	ldr	r7, [pc, #88]	; (8000820 <HAL_RCC_OscConfig+0x320>)
 80007c6:	fa96 f3a6 	rbit	r3, r6
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	fa96 f3a6 	rbit	r3, r6
 80007d0:	fab3 f383 	clz	r3, r3
 80007d4:	f003 031f 	and.w	r3, r3, #31
 80007d8:	fa05 f303 	lsl.w	r3, r5, r3
 80007dc:	4213      	tst	r3, r2
 80007de:	f43f ae99 	beq.w	8000514 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007e2:	f7ff fcf3 	bl	80001cc <HAL_GetTick>
 80007e6:	eba0 0008 	sub.w	r0, r0, r8
 80007ea:	2802      	cmp	r0, #2
 80007ec:	d9eb      	bls.n	80007c6 <HAL_RCC_OscConfig+0x2c6>
 80007ee:	e743      	b.n	8000678 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007f0:	686b      	ldr	r3, [r5, #4]
 80007f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80007f6:	4303      	orrs	r3, r0
 80007f8:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007fa:	6869      	ldr	r1, [r5, #4]
 80007fc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000800:	fa93 f3a3 	rbit	r3, r3
 8000804:	fab3 f283 	clz	r2, r3
 8000808:	69e3      	ldr	r3, [r4, #28]
 800080a:	4093      	lsls	r3, r2
 800080c:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000810:	4313      	orrs	r3, r2
 8000812:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000814:	f7ff fe34 	bl	8000480 <RCC_SetFlashLatencyFromMSIRange>
 8000818:	2800      	cmp	r0, #0
 800081a:	f43f aeb6 	beq.w	800058a <HAL_RCC_OscConfig+0x8a>
 800081e:	e704      	b.n	800062a <HAL_RCC_OscConfig+0x12a>
 8000820:	40023800 	.word	0x40023800
 8000824:	080011a8 	.word	0x080011a8
 8000828:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800082c:	69a2      	ldr	r2, [r4, #24]
 800082e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000832:	2a00      	cmp	r2, #0
 8000834:	d037      	beq.n	80008a6 <HAL_RCC_OscConfig+0x3a6>
 8000836:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 800083a:	fab3 f383 	clz	r3, r3
 800083e:	2601      	movs	r6, #1
 8000840:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000844:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800084c:	f7ff fcbe 	bl	80001cc <HAL_GetTick>
 8000850:	f44f 7700 	mov.w	r7, #512	; 0x200
 8000854:	4680      	mov	r8, r0
 8000856:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800085a:	682a      	ldr	r2, [r5, #0]
 800085c:	fa97 f3a7 	rbit	r3, r7
 8000860:	fab3 f383 	clz	r3, r3
 8000864:	f003 031f 	and.w	r3, r3, #31
 8000868:	fa06 f303 	lsl.w	r3, r6, r3
 800086c:	4213      	tst	r3, r2
 800086e:	d013      	beq.n	8000898 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000870:	686b      	ldr	r3, [r5, #4]
 8000872:	6a22      	ldr	r2, [r4, #32]
 8000874:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000878:	4313      	orrs	r3, r2
 800087a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800087c:	6869      	ldr	r1, [r5, #4]
 800087e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000882:	fa93 f3a3 	rbit	r3, r3
 8000886:	fab3 f283 	clz	r2, r3
 800088a:	69e3      	ldr	r3, [r4, #28]
 800088c:	4093      	lsls	r3, r2
 800088e:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000892:	4313      	orrs	r3, r2
 8000894:	606b      	str	r3, [r5, #4]
 8000896:	e696      	b.n	80005c6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000898:	f7ff fc98 	bl	80001cc <HAL_GetTick>
 800089c:	eba0 0008 	sub.w	r0, r0, r8
 80008a0:	2802      	cmp	r0, #2
 80008a2:	d9d8      	bls.n	8000856 <HAL_RCC_OscConfig+0x356>
 80008a4:	e6e8      	b.n	8000678 <HAL_RCC_OscConfig+0x178>
 80008a6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 80008aa:	fab3 f383 	clz	r3, r3
 80008ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008b2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008ba:	f7ff fc87 	bl	80001cc <HAL_GetTick>
 80008be:	f44f 7600 	mov.w	r6, #512	; 0x200
 80008c2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80008c4:	2701      	movs	r7, #1
 80008c6:	fa96 f3a6 	rbit	r3, r6
 80008ca:	682a      	ldr	r2, [r5, #0]
 80008cc:	fa96 f3a6 	rbit	r3, r6
 80008d0:	fab3 f383 	clz	r3, r3
 80008d4:	f003 031f 	and.w	r3, r3, #31
 80008d8:	fa07 f303 	lsl.w	r3, r7, r3
 80008dc:	4213      	tst	r3, r2
 80008de:	f43f ae72 	beq.w	80005c6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80008e2:	f7ff fc73 	bl	80001cc <HAL_GetTick>
 80008e6:	eba0 0008 	sub.w	r0, r0, r8
 80008ea:	2802      	cmp	r0, #2
 80008ec:	d9eb      	bls.n	80008c6 <HAL_RCC_OscConfig+0x3c6>
 80008ee:	e6c3      	b.n	8000678 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008f0:	6962      	ldr	r2, [r4, #20]
 80008f2:	2501      	movs	r5, #1
 80008f4:	49a9      	ldr	r1, [pc, #676]	; (8000b9c <HAL_RCC_OscConfig+0x69c>)
 80008f6:	b302      	cbz	r2, 800093a <HAL_RCC_OscConfig+0x43a>
 80008f8:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 80008fc:	fab3 f383 	clz	r3, r3
 8000900:	440b      	add	r3, r1
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8000906:	f7ff fc61 	bl	80001cc <HAL_GetTick>
 800090a:	2602      	movs	r6, #2
 800090c:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800090e:	4fa4      	ldr	r7, [pc, #656]	; (8000ba0 <HAL_RCC_OscConfig+0x6a0>)
 8000910:	fa96 f3a6 	rbit	r3, r6
 8000914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000916:	fa96 f3a6 	rbit	r3, r6
 800091a:	fab3 f383 	clz	r3, r3
 800091e:	f003 031f 	and.w	r3, r3, #31
 8000922:	fa05 f303 	lsl.w	r3, r5, r3
 8000926:	4213      	tst	r3, r2
 8000928:	f47f ae51 	bne.w	80005ce <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800092c:	f7ff fc4e 	bl	80001cc <HAL_GetTick>
 8000930:	eba0 0008 	sub.w	r0, r0, r8
 8000934:	2802      	cmp	r0, #2
 8000936:	d9eb      	bls.n	8000910 <HAL_RCC_OscConfig+0x410>
 8000938:	e69e      	b.n	8000678 <HAL_RCC_OscConfig+0x178>
 800093a:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 800093e:	fab3 f383 	clz	r3, r3
 8000942:	440b      	add	r3, r1
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000948:	f7ff fc40 	bl	80001cc <HAL_GetTick>
 800094c:	2602      	movs	r6, #2
 800094e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000950:	4f93      	ldr	r7, [pc, #588]	; (8000ba0 <HAL_RCC_OscConfig+0x6a0>)
 8000952:	fa96 f3a6 	rbit	r3, r6
 8000956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000958:	fa96 f3a6 	rbit	r3, r6
 800095c:	fab3 f383 	clz	r3, r3
 8000960:	f003 031f 	and.w	r3, r3, #31
 8000964:	fa05 f303 	lsl.w	r3, r5, r3
 8000968:	4213      	tst	r3, r2
 800096a:	f43f ae30 	beq.w	80005ce <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800096e:	f7ff fc2d 	bl	80001cc <HAL_GetTick>
 8000972:	eba0 0008 	sub.w	r0, r0, r8
 8000976:	2802      	cmp	r0, #2
 8000978:	d9eb      	bls.n	8000952 <HAL_RCC_OscConfig+0x452>
 800097a:	e67d      	b.n	8000678 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800097c:	4b88      	ldr	r3, [pc, #544]	; (8000ba0 <HAL_RCC_OscConfig+0x6a0>)
 800097e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000980:	00d1      	lsls	r1, r2, #3
 8000982:	d434      	bmi.n	80009ee <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8000984:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000988:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
 800098e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000998:	4d82      	ldr	r5, [pc, #520]	; (8000ba4 <HAL_RCC_OscConfig+0x6a4>)
 800099a:	682b      	ldr	r3, [r5, #0]
 800099c:	05da      	lsls	r2, r3, #23
 800099e:	d528      	bpl.n	80009f2 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009a0:	68a3      	ldr	r3, [r4, #8]
 80009a2:	4d7f      	ldr	r5, [pc, #508]	; (8000ba0 <HAL_RCC_OscConfig+0x6a0>)
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d134      	bne.n	8000a12 <HAL_RCC_OscConfig+0x512>
 80009a8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80009aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ae:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80009b0:	f7ff fc0c 	bl	80001cc <HAL_GetTick>
 80009b4:	f44f 7500 	mov.w	r5, #512	; 0x200
 80009b8:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009ba:	2701      	movs	r7, #1
 80009bc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8000ba0 <HAL_RCC_OscConfig+0x6a0>
 80009c0:	fa95 f3a5 	rbit	r3, r5
 80009c4:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80009c8:	fa95 f3a5 	rbit	r3, r5
 80009cc:	fab3 f383 	clz	r3, r3
 80009d0:	f003 031f 	and.w	r3, r3, #31
 80009d4:	fa07 f303 	lsl.w	r3, r7, r3
 80009d8:	4213      	tst	r3, r2
 80009da:	d04e      	beq.n	8000a7a <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80009dc:	2e00      	cmp	r6, #0
 80009de:	f43f adfa 	beq.w	80005d6 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009e2:	4a6f      	ldr	r2, [pc, #444]	; (8000ba0 <HAL_RCC_OscConfig+0x6a0>)
 80009e4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80009e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009ea:	6253      	str	r3, [r2, #36]	; 0x24
 80009ec:	e5f3      	b.n	80005d6 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80009ee:	2600      	movs	r6, #0
 80009f0:	e7d2      	b.n	8000998 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009f2:	682b      	ldr	r3, [r5, #0]
 80009f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009fa:	f7ff fbe7 	bl	80001cc <HAL_GetTick>
 80009fe:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a00:	682b      	ldr	r3, [r5, #0]
 8000a02:	05db      	lsls	r3, r3, #23
 8000a04:	d4cc      	bmi.n	80009a0 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a06:	f7ff fbe1 	bl	80001cc <HAL_GetTick>
 8000a0a:	1bc0      	subs	r0, r0, r7
 8000a0c:	2864      	cmp	r0, #100	; 0x64
 8000a0e:	d9f7      	bls.n	8000a00 <HAL_RCC_OscConfig+0x500>
 8000a10:	e632      	b.n	8000678 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a12:	bb23      	cbnz	r3, 8000a5e <HAL_RCC_OscConfig+0x55e>
 8000a14:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a16:	f44f 7700 	mov.w	r7, #512	; 0x200
 8000a1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a1e:	636b      	str	r3, [r5, #52]	; 0x34
 8000a20:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a22:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a2a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a2c:	f7ff fbce 	bl	80001cc <HAL_GetTick>
 8000a30:	4681      	mov	r9, r0
 8000a32:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a36:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000a38:	fa97 f3a7 	rbit	r3, r7
 8000a3c:	fab3 f383 	clz	r3, r3
 8000a40:	f003 031f 	and.w	r3, r3, #31
 8000a44:	fa08 f303 	lsl.w	r3, r8, r3
 8000a48:	4213      	tst	r3, r2
 8000a4a:	d0c7      	beq.n	80009dc <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a4c:	f7ff fbbe 	bl	80001cc <HAL_GetTick>
 8000a50:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a54:	eba0 0009 	sub.w	r0, r0, r9
 8000a58:	4298      	cmp	r0, r3
 8000a5a:	d9ea      	bls.n	8000a32 <HAL_RCC_OscConfig+0x532>
 8000a5c:	e60c      	b.n	8000678 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a5e:	2b05      	cmp	r3, #5
 8000a60:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a62:	d103      	bne.n	8000a6c <HAL_RCC_OscConfig+0x56c>
 8000a64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a68:	636b      	str	r3, [r5, #52]	; 0x34
 8000a6a:	e79d      	b.n	80009a8 <HAL_RCC_OscConfig+0x4a8>
 8000a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a70:	636b      	str	r3, [r5, #52]	; 0x34
 8000a72:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a78:	e799      	b.n	80009ae <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a7a:	f7ff fba7 	bl	80001cc <HAL_GetTick>
 8000a7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a82:	eba0 0009 	sub.w	r0, r0, r9
 8000a86:	4298      	cmp	r0, r3
 8000a88:	d99a      	bls.n	80009c0 <HAL_RCC_OscConfig+0x4c0>
 8000a8a:	e5f5      	b.n	8000678 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a8c:	4d44      	ldr	r5, [pc, #272]	; (8000ba0 <HAL_RCC_OscConfig+0x6a0>)
 8000a8e:	68ab      	ldr	r3, [r5, #8]
 8000a90:	f003 030c 	and.w	r3, r3, #12
 8000a94:	2b0c      	cmp	r3, #12
 8000a96:	f43f adc8 	beq.w	800062a <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a9a:	2a02      	cmp	r2, #2
 8000a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa0:	d156      	bne.n	8000b50 <HAL_RCC_OscConfig+0x650>
 8000aa2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000aa6:	fab3 f383 	clz	r3, r3
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ab0:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ab8:	f7ff fb88 	bl	80001cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000abc:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8000abe:	4680      	mov	r8, r0
 8000ac0:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ac4:	2501      	movs	r5, #1
 8000ac6:	fa97 f3a7 	rbit	r3, r7
 8000aca:	6832      	ldr	r2, [r6, #0]
 8000acc:	fa97 f3a7 	rbit	r3, r7
 8000ad0:	fab3 f383 	clz	r3, r3
 8000ad4:	f003 031f 	and.w	r3, r3, #31
 8000ad8:	fa05 f303 	lsl.w	r3, r5, r3
 8000adc:	4213      	tst	r3, r2
 8000ade:	d130      	bne.n	8000b42 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ae0:	68b2      	ldr	r2, [r6, #8]
 8000ae2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ae4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000ae6:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8000aea:	430b      	orrs	r3, r1
 8000aec:	4313      	orrs	r3, r2
 8000aee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000af0:	4313      	orrs	r3, r2
 8000af2:	60b3      	str	r3, [r6, #8]
 8000af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000af8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000afc:	fab3 f383 	clz	r3, r3
 8000b00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b04:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000b0c:	f7ff fb5e 	bl	80001cc <HAL_GetTick>
 8000b10:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000b14:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b16:	2501      	movs	r5, #1
 8000b18:	4e21      	ldr	r6, [pc, #132]	; (8000ba0 <HAL_RCC_OscConfig+0x6a0>)
 8000b1a:	fa94 f3a4 	rbit	r3, r4
 8000b1e:	6832      	ldr	r2, [r6, #0]
 8000b20:	fa94 f3a4 	rbit	r3, r4
 8000b24:	fab3 f383 	clz	r3, r3
 8000b28:	f003 031f 	and.w	r3, r3, #31
 8000b2c:	fa05 f303 	lsl.w	r3, r5, r3
 8000b30:	4213      	tst	r3, r2
 8000b32:	f47f ad54 	bne.w	80005de <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b36:	f7ff fb49 	bl	80001cc <HAL_GetTick>
 8000b3a:	1bc0      	subs	r0, r0, r7
 8000b3c:	2802      	cmp	r0, #2
 8000b3e:	d9ec      	bls.n	8000b1a <HAL_RCC_OscConfig+0x61a>
 8000b40:	e59a      	b.n	8000678 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b42:	f7ff fb43 	bl	80001cc <HAL_GetTick>
 8000b46:	eba0 0008 	sub.w	r0, r0, r8
 8000b4a:	2802      	cmp	r0, #2
 8000b4c:	d9bb      	bls.n	8000ac6 <HAL_RCC_OscConfig+0x5c6>
 8000b4e:	e593      	b.n	8000678 <HAL_RCC_OscConfig+0x178>
 8000b50:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000b54:	fab3 f383 	clz	r3, r3
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b5e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b66:	f7ff fb31 	bl	80001cc <HAL_GetTick>
 8000b6a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000b6e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b70:	2601      	movs	r6, #1
 8000b72:	fa94 f3a4 	rbit	r3, r4
 8000b76:	682a      	ldr	r2, [r5, #0]
 8000b78:	fa94 f3a4 	rbit	r3, r4
 8000b7c:	fab3 f383 	clz	r3, r3
 8000b80:	f003 031f 	and.w	r3, r3, #31
 8000b84:	fa06 f303 	lsl.w	r3, r6, r3
 8000b88:	4213      	tst	r3, r2
 8000b8a:	f43f ad28 	beq.w	80005de <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b8e:	f7ff fb1d 	bl	80001cc <HAL_GetTick>
 8000b92:	1bc0      	subs	r0, r0, r7
 8000b94:	2802      	cmp	r0, #2
 8000b96:	d9ec      	bls.n	8000b72 <HAL_RCC_OscConfig+0x672>
 8000b98:	e56e      	b.n	8000678 <HAL_RCC_OscConfig+0x178>
 8000b9a:	bf00      	nop
 8000b9c:	1091c1a0 	.word	0x1091c1a0
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40007000 	.word	0x40007000

08000ba8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000ba8:	491e      	ldr	r1, [pc, #120]	; (8000c24 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8000baa:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000bac:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8000bae:	f003 020c 	and.w	r2, r3, #12
 8000bb2:	2a08      	cmp	r2, #8
 8000bb4:	d005      	beq.n	8000bc2 <HAL_RCC_GetSysClockFreq+0x1a>
 8000bb6:	2a0c      	cmp	r2, #12
 8000bb8:	d005      	beq.n	8000bc6 <HAL_RCC_GetSysClockFreq+0x1e>
 8000bba:	2a04      	cmp	r2, #4
 8000bbc:	d122      	bne.n	8000c04 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8000bbe:	481a      	ldr	r0, [pc, #104]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8000bc0:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000bc2:	481a      	ldr	r0, [pc, #104]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x84>)
 8000bc4:	bd10      	pop	{r4, pc}
 8000bc6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000bca:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8000bd6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bda:	4815      	ldr	r0, [pc, #84]	; (8000c30 <HAL_RCC_GetSysClockFreq+0x88>)
 8000bdc:	5c84      	ldrb	r4, [r0, r2]
 8000bde:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8000be2:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000be6:	fab0 f280 	clz	r2, r0
 8000bea:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bee:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000bf0:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf2:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8000bf4:	bf4c      	ite	mi
 8000bf6:	4b0d      	ldrmi	r3, [pc, #52]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8000bf8:	4b0b      	ldrpl	r3, [pc, #44]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000bfa:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8000bfc:	4363      	muls	r3, r4
 8000bfe:	fbb3 f0f0 	udiv	r0, r3, r0
 8000c02:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000c04:	6848      	ldr	r0, [r1, #4]
 8000c06:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c0a:	fa93 f3a3 	rbit	r3, r3
 8000c0e:	fab3 f383 	clz	r3, r3
 8000c12:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8000c16:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8000c18:	1c43      	adds	r3, r0, #1
 8000c1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c1e:	4098      	lsls	r0, r3
 8000c20:	bd10      	pop	{r4, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	00f42400 	.word	0x00f42400
 8000c2c:	007a1200 	.word	0x007a1200
 8000c30:	080011b8 	.word	0x080011b8

08000c34 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c34:	4b6a      	ldr	r3, [pc, #424]	; (8000de0 <HAL_RCC_ClockConfig+0x1ac>)
{
 8000c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c3a:	681a      	ldr	r2, [r3, #0]
{
 8000c3c:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c3e:	f002 0201 	and.w	r2, r2, #1
 8000c42:	428a      	cmp	r2, r1
{
 8000c44:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c46:	d330      	bcc.n	8000caa <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c48:	6832      	ldr	r2, [r6, #0]
 8000c4a:	0794      	lsls	r4, r2, #30
 8000c4c:	d440      	bmi.n	8000cd0 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c4e:	07d0      	lsls	r0, r2, #31
 8000c50:	d446      	bmi.n	8000ce0 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c52:	4b63      	ldr	r3, [pc, #396]	; (8000de0 <HAL_RCC_ClockConfig+0x1ac>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	f002 0201 	and.w	r2, r2, #1
 8000c5a:	4295      	cmp	r5, r2
 8000c5c:	f0c0 80ae 	bcc.w	8000dbc <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c60:	6832      	ldr	r2, [r6, #0]
 8000c62:	0751      	lsls	r1, r2, #29
 8000c64:	f100 80b3 	bmi.w	8000dce <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c68:	0713      	lsls	r3, r2, #28
 8000c6a:	d507      	bpl.n	8000c7c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c6c:	4a5d      	ldr	r2, [pc, #372]	; (8000de4 <HAL_RCC_ClockConfig+0x1b0>)
 8000c6e:	6931      	ldr	r1, [r6, #16]
 8000c70:	6893      	ldr	r3, [r2, #8]
 8000c72:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c76:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c7a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000c7c:	f7ff ff94 	bl	8000ba8 <HAL_RCC_GetSysClockFreq>
 8000c80:	4b58      	ldr	r3, [pc, #352]	; (8000de4 <HAL_RCC_ClockConfig+0x1b0>)
 8000c82:	22f0      	movs	r2, #240	; 0xf0
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	fa92 f2a2 	rbit	r2, r2
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c92:	40d3      	lsrs	r3, r2
 8000c94:	4a54      	ldr	r2, [pc, #336]	; (8000de8 <HAL_RCC_ClockConfig+0x1b4>)
 8000c96:	5cd3      	ldrb	r3, [r2, r3]
 8000c98:	40d8      	lsrs	r0, r3
 8000c9a:	4b54      	ldr	r3, [pc, #336]	; (8000dec <HAL_RCC_ClockConfig+0x1b8>)
 8000c9c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff fa6c 	bl	800017c <HAL_InitTick>
  return HAL_OK;
 8000ca4:	2000      	movs	r0, #0
}
 8000ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000caa:	2901      	cmp	r1, #1
 8000cac:	bf02      	ittt	eq
 8000cae:	681a      	ldreq	r2, [r3, #0]
 8000cb0:	f042 0204 	orreq.w	r2, r2, #4
 8000cb4:	601a      	streq	r2, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	f022 0201 	bic.w	r2, r2, #1
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d0be      	beq.n	8000c48 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000cca:	2001      	movs	r0, #1
 8000ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cd0:	4944      	ldr	r1, [pc, #272]	; (8000de4 <HAL_RCC_ClockConfig+0x1b0>)
 8000cd2:	68b0      	ldr	r0, [r6, #8]
 8000cd4:	688b      	ldr	r3, [r1, #8]
 8000cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cda:	4303      	orrs	r3, r0
 8000cdc:	608b      	str	r3, [r1, #8]
 8000cde:	e7b6      	b.n	8000c4e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ce0:	6872      	ldr	r2, [r6, #4]
 8000ce2:	4940      	ldr	r1, [pc, #256]	; (8000de4 <HAL_RCC_ClockConfig+0x1b0>)
 8000ce4:	2a02      	cmp	r2, #2
 8000ce6:	d10f      	bne.n	8000d08 <HAL_RCC_ClockConfig+0xd4>
 8000ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cec:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000cf0:	6808      	ldr	r0, [r1, #0]
 8000cf2:	fa93 f3a3 	rbit	r3, r3
 8000cf6:	fab3 f383 	clz	r3, r3
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	f003 031f 	and.w	r3, r3, #31
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	4203      	tst	r3, r0
 8000d06:	e013      	b.n	8000d30 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d08:	2a03      	cmp	r2, #3
 8000d0a:	d102      	bne.n	8000d12 <HAL_RCC_ClockConfig+0xde>
 8000d0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d10:	e7ec      	b.n	8000cec <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d12:	2a01      	cmp	r2, #1
 8000d14:	d129      	bne.n	8000d6a <HAL_RCC_ClockConfig+0x136>
 8000d16:	2302      	movs	r3, #2
 8000d18:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	6809      	ldr	r1, [r1, #0]
 8000d1e:	fa93 f3a3 	rbit	r3, r3
 8000d22:	fab3 f383 	clz	r3, r3
 8000d26:	f003 031f 	and.w	r3, r3, #31
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000d30:	d0cb      	beq.n	8000cca <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d32:	4c2c      	ldr	r4, [pc, #176]	; (8000de4 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d34:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d38:	68a3      	ldr	r3, [r4, #8]
 8000d3a:	f023 0303 	bic.w	r3, r3, #3
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8000d42:	f7ff fa43 	bl	80001cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d46:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d48:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d110      	bne.n	8000d70 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d4e:	68a3      	ldr	r3, [r4, #8]
 8000d50:	f003 030c 	and.w	r3, r3, #12
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	f43f af7c 	beq.w	8000c52 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d5a:	f7ff fa37 	bl	80001cc <HAL_GetTick>
 8000d5e:	1bc0      	subs	r0, r0, r7
 8000d60:	4540      	cmp	r0, r8
 8000d62:	d9f4      	bls.n	8000d4e <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8000d64:	2003      	movs	r0, #3
 8000d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6e:	e7bd      	b.n	8000cec <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d10b      	bne.n	8000d8c <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d74:	68a3      	ldr	r3, [r4, #8]
 8000d76:	f003 030c 	and.w	r3, r3, #12
 8000d7a:	2b0c      	cmp	r3, #12
 8000d7c:	f43f af69 	beq.w	8000c52 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d80:	f7ff fa24 	bl	80001cc <HAL_GetTick>
 8000d84:	1bc0      	subs	r0, r0, r7
 8000d86:	4540      	cmp	r0, r8
 8000d88:	d9f4      	bls.n	8000d74 <HAL_RCC_ClockConfig+0x140>
 8000d8a:	e7eb      	b.n	8000d64 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d110      	bne.n	8000db2 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d90:	68a3      	ldr	r3, [r4, #8]
 8000d92:	f003 030c 	and.w	r3, r3, #12
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	f43f af5b 	beq.w	8000c52 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d9c:	f7ff fa16 	bl	80001cc <HAL_GetTick>
 8000da0:	1bc0      	subs	r0, r0, r7
 8000da2:	4540      	cmp	r0, r8
 8000da4:	d9f4      	bls.n	8000d90 <HAL_RCC_ClockConfig+0x15c>
 8000da6:	e7dd      	b.n	8000d64 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da8:	f7ff fa10 	bl	80001cc <HAL_GetTick>
 8000dac:	1bc0      	subs	r0, r0, r7
 8000dae:	4540      	cmp	r0, r8
 8000db0:	d8d8      	bhi.n	8000d64 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000db2:	68a3      	ldr	r3, [r4, #8]
 8000db4:	f013 0f0c 	tst.w	r3, #12
 8000db8:	d1f6      	bne.n	8000da8 <HAL_RCC_ClockConfig+0x174>
 8000dba:	e74a      	b.n	8000c52 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	f022 0201 	bic.w	r2, r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	07da      	lsls	r2, r3, #31
 8000dc8:	f53f af7f 	bmi.w	8000cca <HAL_RCC_ClockConfig+0x96>
 8000dcc:	e748      	b.n	8000c60 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dce:	4905      	ldr	r1, [pc, #20]	; (8000de4 <HAL_RCC_ClockConfig+0x1b0>)
 8000dd0:	68f0      	ldr	r0, [r6, #12]
 8000dd2:	688b      	ldr	r3, [r1, #8]
 8000dd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dd8:	4303      	orrs	r3, r0
 8000dda:	608b      	str	r3, [r1, #8]
 8000ddc:	e744      	b.n	8000c68 <HAL_RCC_ClockConfig+0x34>
 8000dde:	bf00      	nop
 8000de0:	40023c00 	.word	0x40023c00
 8000de4:	40023800 	.word	0x40023800
 8000de8:	080011a8 	.word	0x080011a8
 8000dec:	20000000 	.word	0x20000000

08000df0 <HAL_RCC_GetHCLKFreq>:
}
 8000df0:	4b01      	ldr	r3, [pc, #4]	; (8000df8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000000 	.word	0x20000000

08000dfc <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfc:	4b4e      	ldr	r3, [pc, #312]	; (8000f38 <MX_GPIO_Init+0x13c>)
{
 8000dfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	69da      	ldr	r2, [r3, #28]
{
 8000e04:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	f042 0204 	orr.w	r2, r2, #4
 8000e0a:	61da      	str	r2, [r3, #28]
 8000e0c:	69da      	ldr	r2, [r3, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_RESET);
 8000e0e:	4f4b      	ldr	r7, [pc, #300]	; (8000f3c <MX_GPIO_Init+0x140>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e10:	f002 0204 	and.w	r2, r2, #4
 8000e14:	9202      	str	r2, [sp, #8]
 8000e16:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e1a:	4e49      	ldr	r6, [pc, #292]	; (8000f40 <MX_GPIO_Init+0x144>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	f042 0201 	orr.w	r2, r2, #1
 8000e20:	61da      	str	r2, [r3, #28]
 8000e22:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_RESET);
 8000e24:	4638      	mov	r0, r7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	f002 0201 	and.w	r2, r2, #1
 8000e2a:	9203      	str	r2, [sp, #12]
 8000e2c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_RESET);
 8000e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	f042 0202 	orr.w	r2, r2, #2
 8000e38:	61da      	str	r2, [r3, #28]
 8000e3a:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	9304      	str	r3, [sp, #16]
 8000e44:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(IDD_CNT_EN_GPIO_Port, IDD_CNT_EN_Pin, GPIO_PIN_RESET);
 8000e46:	f7ff fb11 	bl	800046c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	21c0      	movs	r1, #192	; 0xc0

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e52:	f7ff fb0b 	bl	800046c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin;
 8000e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(IDD_CNT_EN_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	a905      	add	r1, sp, #20
 8000e60:	4638      	mov	r0, r7
                           PCPin PCPin PCPin PCPin 
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin 
                          |SEG18_Pin|SEG19_Pin|SEG20_Pin|SEG21_Pin 
                          |SEG22_Pin|SEG23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	f04f 0b02 	mov.w	fp, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000e66:	f04f 0a0b 	mov.w	sl, #11
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin;
 8000e6a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(IDD_CNT_EN_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f7ff fa2c 	bl	80002d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin 
 8000e78:	f640 73cf 	movw	r3, #4047	; 0xfcf

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8000f48 <MX_GPIO_Init+0x14c>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e80:	a905      	add	r1, sp, #20
 8000e82:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin 
 8000e84:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	f8cd b018 	str.w	fp, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000e8e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f7ff fa1d 	bl	80002d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <MX_GPIO_Init+0x148>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e98:	a905      	add	r1, sp, #20
 8000e9a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e9c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 8000e9e:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f7ff fa14 	bl	80002d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin 
 8000ea8:	f248 730e 	movw	r3, #34574	; 0x870e
                          |COM1_Pin|COM2_Pin|SEG12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	a905      	add	r1, sp, #20
 8000eae:	4640      	mov	r0, r8

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb0:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin 
 8000eb2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	f8cd b018 	str.w	fp, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000ebc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f7ff fa06 	bl	80002d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8000ec4:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	a905      	add	r1, sp, #20
 8000ec8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8000eca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ecc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f7ff f9fe 	bl	80002d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GRP2_Sampling_Pin|GRP2_Ground_Pin;
 8000ed4:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	a905      	add	r1, sp, #20
 8000ed8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GRP2_Sampling_Pin|GRP2_Ground_Pin;
 8000eda:	9305      	str	r3, [sp, #20]
 8000edc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ede:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f7ff f9f5 	bl	80002d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GRP9_Sampling_Pin|GRP9_Ground_Pin;
 8000ee6:	2230      	movs	r2, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee8:	a905      	add	r1, sp, #20
 8000eea:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GRP9_Sampling_Pin|GRP9_Ground_Pin;
 8000eec:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eee:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef2:	f7ff f9ed 	bl	80002d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GRP3_Sampling_Pin|GRP3_Ground_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	a905      	add	r1, sp, #20
 8000ef8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GRP3_Sampling_Pin|GRP3_Ground_Pin;
 8000efa:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f7ff f9e6 	bl	80002d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin 
 8000f04:	f64f 7238 	movw	r2, #65336	; 0xff38
                          |SEG5_Pin|SEG13_Pin|COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	a905      	add	r1, sp, #20
 8000f0a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin 
 8000f0c:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	f8cd b018 	str.w	fp, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f16:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f7ff f9d9 	bl	80002d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000f1e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	a905      	add	r1, sp, #20
 8000f22:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000f24:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f7ff f9cf 	bl	80002d0 <HAL_GPIO_Init>

}
 8000f32:	b00b      	add	sp, #44	; 0x2c
 8000f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	40020400 	.word	0x40020400
 8000f44:	10120000 	.word	0x10120000
 8000f48:	40020000 	.word	0x40020000

08000f4c <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <SystemClock_Config+0x7c>)
{
 8000f4e:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f50:	6813      	ldr	r3, [r2, #0]
{
 8000f52:	b092      	sub	sp, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f54:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f5c:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f62:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f64:	2300      	movs	r3, #0
 8000f66:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000f6e:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f70:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000f72:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f76:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f78:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000f7a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000f7c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	f7ff fabf 	bl	8000500 <HAL_RCC_OscConfig>
 8000f82:	b100      	cbz	r0, 8000f86 <SystemClock_Config+0x3a>
 8000f84:	e7fe      	b.n	8000f84 <SystemClock_Config+0x38>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f86:	220f      	movs	r2, #15
 8000f88:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8e:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f90:	4621      	mov	r1, r4
 8000f92:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f94:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f98:	f7ff fe4c 	bl	8000c34 <HAL_RCC_ClockConfig>
 8000f9c:	4604      	mov	r4, r0
 8000f9e:	b100      	cbz	r0, 8000fa2 <SystemClock_Config+0x56>
 8000fa0:	e7fe      	b.n	8000fa0 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000fa2:	f7ff ff25 	bl	8000df0 <HAL_RCC_GetHCLKFreq>
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fae:	f7ff f967 	bl	8000280 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000fb2:	2004      	movs	r0, #4
 8000fb4:	f7ff f97a 	bl	80002ac <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fb8:	4622      	mov	r2, r4
 8000fba:	4621      	mov	r1, r4
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff f92a 	bl	8000218 <HAL_NVIC_SetPriority>
}
 8000fc4:	b012      	add	sp, #72	; 0x48
 8000fc6:	bd10      	pop	{r4, pc}
 8000fc8:	40007000 	.word	0x40007000

08000fcc <main>:
{
 8000fcc:	b508      	push	{r3, lr}
  HAL_Init();
 8000fce:	f7ff f8e9 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8000fd2:	f7ff ffbb 	bl	8000f4c <SystemClock_Config>
  MX_GPIO_Init();
 8000fd6:	f7ff ff11 	bl	8000dfc <MX_GPIO_Init>
	  HAL_GPIO_TogglePin(LD4_GPIO_Port,LD4_Pin);
 8000fda:	4c09      	ldr	r4, [pc, #36]	; (8001000 <main+0x34>)
 8000fdc:	2140      	movs	r1, #64	; 0x40
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f7ff fa49 	bl	8000476 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000fe4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fe8:	f7ff f8f6 	bl	80001d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fec:	4620      	mov	r0, r4
 8000fee:	2180      	movs	r1, #128	; 0x80
 8000ff0:	f7ff fa41 	bl	8000476 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000ff4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff8:	f7ff f8ee 	bl	80001d8 <HAL_Delay>
 8000ffc:	e7ee      	b.n	8000fdc <main+0x10>
 8000ffe:	bf00      	nop
 8001000:	40020400 	.word	0x40020400

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001008:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 800100a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800100c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
 8001012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001014:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001018:	9201      	str	r2, [sp, #4]
 800101a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	6a1a      	ldr	r2, [r3, #32]
 800101e:	f042 0201 	orr.w	r2, r2, #1
 8001022:	621a      	str	r2, [r3, #32]
 8001024:	6a1a      	ldr	r2, [r3, #32]
 8001026:	f002 0201 	and.w	r2, r2, #1
 800102a:	9202      	str	r2, [sp, #8]
 800102c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001030:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103c:	9303      	str	r3, [sp, #12]
 800103e:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001040:	f7ff f8d8 	bl	80001f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	f06f 000b 	mvn.w	r0, #11
 800104a:	4611      	mov	r1, r2
 800104c:	f7ff f8e4 	bl	8000218 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	f06f 000a 	mvn.w	r0, #10
 8001056:	4611      	mov	r1, r2
 8001058:	f7ff f8de 	bl	8000218 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	f06f 0009 	mvn.w	r0, #9
 8001062:	4611      	mov	r1, r2
 8001064:	f7ff f8d8 	bl	8000218 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	f06f 0004 	mvn.w	r0, #4
 800106e:	4611      	mov	r1, r2
 8001070:	f7ff f8d2 	bl	8000218 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	f06f 0003 	mvn.w	r0, #3
 800107a:	4611      	mov	r1, r2
 800107c:	f7ff f8cc 	bl	8000218 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	f06f 0001 	mvn.w	r0, #1
 8001086:	4611      	mov	r1, r2
 8001088:	f7ff f8c6 	bl	8000218 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
 8001092:	4611      	mov	r1, r2
 8001094:	f7ff f8c0 	bl	8000218 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001098:	b005      	add	sp, #20
 800109a:	f85d fb04 	ldr.w	pc, [sp], #4
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80010a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a6:	f7ff f889 	bl	80001bc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80010ae:	f7ff b90a 	b.w	80002c6 <HAL_SYSTICK_IRQHandler>
	...

080010b4 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <SystemInit+0x3c>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010bc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80010be:	6899      	ldr	r1, [r3, #8]
 80010c0:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <SystemInit+0x40>)
 80010c2:	400a      	ands	r2, r1
 80010c4:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80010cc:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 80010d0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010d8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80010e0:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ea:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <SystemInit+0x44>)
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	4770      	bx	lr
 80010f0:	40023800 	.word	0x40023800
 80010f4:	88ffc00c 	.word	0x88ffc00c
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010fe:	e003      	b.n	8001108 <LoopCopyDataInit>

08001100 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001102:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001104:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001106:	3104      	adds	r1, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001108:	480a      	ldr	r0, [pc, #40]	; (8001134 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800110c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800110e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001110:	d3f6      	bcc.n	8001100 <CopyDataInit>
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001114:	e002      	b.n	800111c <LoopFillZerobss>

08001116 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001118:	f842 3b04 	str.w	r3, [r2], #4

0800111c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800111e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001120:	d3f9      	bcc.n	8001116 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001122:	f7ff ffc7 	bl	80010b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001126:	f000 f80f 	bl	8001148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800112a:	f7ff ff4f 	bl	8000fcc <main>
  bx lr
 800112e:	4770      	bx	lr
  ldr r3, =_sidata
 8001130:	080011cc 	.word	0x080011cc
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001138:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 800113c:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001140:	20000024 	.word	0x20000024

08001144 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_IRQHandler>
	...

08001148 <__libc_init_array>:
 8001148:	b570      	push	{r4, r5, r6, lr}
 800114a:	2500      	movs	r5, #0
 800114c:	4e0c      	ldr	r6, [pc, #48]	; (8001180 <__libc_init_array+0x38>)
 800114e:	4c0d      	ldr	r4, [pc, #52]	; (8001184 <__libc_init_array+0x3c>)
 8001150:	1ba4      	subs	r4, r4, r6
 8001152:	10a4      	asrs	r4, r4, #2
 8001154:	42a5      	cmp	r5, r4
 8001156:	d109      	bne.n	800116c <__libc_init_array+0x24>
 8001158:	f000 f81a 	bl	8001190 <_init>
 800115c:	2500      	movs	r5, #0
 800115e:	4e0a      	ldr	r6, [pc, #40]	; (8001188 <__libc_init_array+0x40>)
 8001160:	4c0a      	ldr	r4, [pc, #40]	; (800118c <__libc_init_array+0x44>)
 8001162:	1ba4      	subs	r4, r4, r6
 8001164:	10a4      	asrs	r4, r4, #2
 8001166:	42a5      	cmp	r5, r4
 8001168:	d105      	bne.n	8001176 <__libc_init_array+0x2e>
 800116a:	bd70      	pop	{r4, r5, r6, pc}
 800116c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001170:	4798      	blx	r3
 8001172:	3501      	adds	r5, #1
 8001174:	e7ee      	b.n	8001154 <__libc_init_array+0xc>
 8001176:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800117a:	4798      	blx	r3
 800117c:	3501      	adds	r5, #1
 800117e:	e7f2      	b.n	8001166 <__libc_init_array+0x1e>
 8001180:	080011c4 	.word	0x080011c4
 8001184:	080011c4 	.word	0x080011c4
 8001188:	080011c4 	.word	0x080011c4
 800118c:	080011c8 	.word	0x080011c8

08001190 <_init>:
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001192:	bf00      	nop
 8001194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001196:	bc08      	pop	{r3}
 8001198:	469e      	mov	lr, r3
 800119a:	4770      	bx	lr

0800119c <_fini>:
 800119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119e:	bf00      	nop
 80011a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011a2:	bc08      	pop	{r3}
 80011a4:	469e      	mov	lr, r3
 80011a6:	4770      	bx	lr
